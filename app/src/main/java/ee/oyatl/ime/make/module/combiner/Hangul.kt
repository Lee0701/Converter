package ee.oyatl.ime.make.module.combiner

object Hangul {
    /**
     * A table for converting an Hangul Compatibility Choseong
     * to Standard Hangul Choseong.
     * Aligned in the same order with Compatibility Choseong codepoints,
     * values of zero indicate that there is no equivalent Standard one.
     */
    private val CONVERT_CHO = intArrayOf(
        0x1100, 0x1101, 0x0000, 0x1102, 0x0000, 0x115d, 0x1103,  // 0x3130 (0x115d: traditional)
        0x1104, 0x1105, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3138
        0x111a, 0x1106, 0x1107, 0x1108, 0x0000, 0x1109, 0x110a, 0x110b,  // 0x3140 (0x111a: traditional)
        0x110c, 0x110d, 0x110e, 0x110f, 0x1110, 0x1111, 0x1112, 0x0000,  // 0x3148
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3150
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3158
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1114, 0x1115, 0x0000,  // 0x3160
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x111c, 0x0000,  // 0x3168
        0x0000, 0x111d, 0x111e, 0x1120, 0x1122, 0x1123, 0x1127, 0x1129,  // 0x3170
        0x112b, 0x112c, 0x112d, 0x112e, 0x112f, 0x1132, 0x1136, 0x1140,  // 0x3178
        0x1147, 0x114c, 0x0000, 0x0000, 0x1157, 0x1158, 0x1159
    )

    /**
     * A table for converting an Hangul Compatibility Jongseong
     * to Standard Hangul Jongseong.
     */
    private val CONVERT_JONG = intArrayOf(
        0x11a8, 0x11a9, 0x11aa, 0x11ab, 0x11ac, 0x11ad, 0x11ae,  // 0x3130
        0x0000, 0x11af, 0x11b0, 0x11b1, 0x11b2, 0x11b3, 0x11b4, 0x11b5,  // 0x3138
        0x11b6, 0x11b7, 0x11b8, 0x0000, 0x11b9, 0x11ba, 0x11bb, 0x11bc,  // 0x3140
        0x11bd, 0x0000, 0x11be, 0x11bf, 0x11c0, 0x11c1, 0x11c2, 0x0000,  // 0x3148
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3150
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3158
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x11c6, 0x11c7,  // 0x3160
        0x11c8, 0x11cc, 0x11ce, 0x11d3, 0x11d7, 0x11d9, 0x11dc, 0x11dd,  // 0x3168
        0x11df, 0x11e2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x3170
        0x11e6, 0x0000, 0x11e7, 0x0000, 0x11e8, 0x11ea, 0x0000, 0x11eb,  // 0x3178
        0x0000, 0x11f0, 0x11f1, 0x11f2, 0x11f4, 0x0000, 0x11f9 // 0x3180
    )

    /**
     * A table for converting an Old Hangul Compatibility Jungseong
     * to Standard Old Hangul Jungseong.
     * Modern one is not needed as they are in the same order.
     */
    private val CONVERT_OLDHANGUL_JUNG = intArrayOf(
        0x1184, 0x1185, 0x1188, 0x1191, 0x1192, 0x1194, 0x119e, 0x11a1 // 0x3187
    )

    fun isCho(code: Int) = code in 0x1100..0x115f || code in 0xa960..0xa97c
    fun isJung(code: Int) = code in 0x1160..0x11a7 || code in 0xd7b0..0xd7ca
    fun isJong(code: Int) = code in 0x11a8..0x11ff || code in 0xd7cb..0xd7ff
    fun isModernJamo(code: Int) = code in 0x1100 ..0x1112 || code in 0x1161..0x1175 || code in 0x11a8..0x11c2
    fun isJamo(code: Int) = isCho(code) || isJung(code) || isJong(code)

    fun isConsonant(code: Int) = code in 0x3131..0x314e || code in 0x3165..0x3186
    fun isVowel(code: Int) = code in 0x314f..0x3163 || code in 0x3187..0x318e
    fun isModernCompatJamo(code: Int) = code in 0x3131..0x314e || code in 0x314f..0x3163
    fun isCompatJamo(code: Int) = isConsonant(code) || isVowel(code)

    fun choToCompatConsonant(char: Char): Char = (CONVERT_CHO.indexOf(char.code) + 0x3131).toChar()
    fun jungToCompatVowel(char: Char): Char = (char - 0x1161 + 0x314f)
    fun jongToCompatConsonant(char: Char): Char = (CONVERT_JONG.indexOf(char.code) + 0x3131).toChar()

    fun consonantToCho(code: Int): Int = CONVERT_CHO[code - 0x3131]
    fun vowelToJung(code: Int): Int =
        if(code in 0x314f .. 0x3163) (code - 0x314f + 0x1161)
        else CONVERT_OLDHANGUL_JUNG[code - 0x3187]
    fun consonantToJong(code: Int): Int = CONVERT_JONG[code - 0x3131]

    fun ghostLight(jong: Int): Int {
        return consonantToCho(jongToCompatConsonant(jong.toChar()).code)
    }

    fun combineNFC(cho: Int, jung: Int, jong: Int?): Char {
        return (0xac00 + 21*28*cho + 28*jung + (jong?:0)).toChar()
    }
    fun combineNFD(cho: Char?, jung: Char?, jong: Char?): CharSequence {
        return "${(cho ?: 0x115f.toChar())}${(jung ?: 0x1160.toChar())}${jong?.toString().orEmpty()}"
    }
}